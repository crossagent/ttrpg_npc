Autogen多智能体跑团游戏系统架构设计
一、顶层架构概览

聊天室环境

基于 Autogen 的 GroupChat 与 GroupChatManager 模块构建全局聊天室，实时记录 DM 与玩家公开消息。


对话流程

DM 推进：DM Agent 根据上一轮玩家响应集合与当前剧本状态生成情节推进消息，并发布到聊天室。
玩家响应：各玩家 Agent 以当前轮 DM 消息与上一轮玩家响应集合作为输入进行决策，生成各自响应。
消息记录：所有玩家的响应被添加到聊天历史中，形成本回合的"玩家响应集合"，自然成为下一回合决策的输入之一。


上下文构建

各 Agent 在其观察阶段，通过访问聊天历史获取上一轮玩家响应集合和当前轮的 DM 消息，构建自己的决策输入。


环境/场景与剧本管理

管理当前场景描述、环境变量和剧本数据（章节、情节节点、触发条件等）。
负责更新剧本中的环境上下文，环境剧本 Agent 分析完整回合对话（DM消息+所有玩家响应）后提取关键信息，修改剧本上下文，供下一轮 DM Agent 判断使用。


扩展与自定义

支持自动回复、工具调用、人工干预等机制，可灵活配置对话拓扑（例如采用轮询策略）以及回复策略，满足多智能体协同工作的需求。



二、模块划分与整体流程

房间/聊天室管理模块

功能：

利用 GroupChat 构建全局聊天室，记录所有 DM 与玩家公开消息。
通过 GroupChatManager 管理对话流，采用"轮询"（round_robin）策略依次选择下一位发言者。
每个回合中，所有玩家的响应被添加到聊天历史中，形成该回合的"玩家响应集合"。所有Agent在下一轮可通过访问聊天历史看到这些信息，与下一轮DM消息共同作为决策输入。




环境/场景与剧本模块

功能：

管理当前场景描述、环境变量（如天气、时间、危险指数等）及剧本数据（章节、情节节点、触发条件等）。
更新场景状态：环境剧本 Agent 在一个完整回合结束后（包含DM消息和玩家响应集合），分析提取关键信息，修改剧本中的环境上下文信息，供下一轮 DM Agent 使用。




Agent 模块

总体说明： 所有 Agent 均基于 Autogen 的 ConversableAgent 类构建，并在各自内部维护历史观察、决策与行动记录。

A. DM Agent（故事推进者）

基于上一轮玩家响应集合和当前剧本状态生成情节推进消息。
具有主动判断触发关键事件和推进剧情的权力。

B. 玩家 Agent（响应者）

通过访问聊天历史，获取上一轮玩家响应集合和当前轮 DM 消息作为输入进行决策，生成响应输出。
同时维护自身内部上下文（包括历史观察、决策、行动记录）。

C. 环境剧本 Agent

分析完整回合对话（DM消息+所有玩家响应），观察场景描述与环境变量变化。
判断是否需要更新剧本中的环境上下文，并直接修改剧本状态，供下一轮 DM Agent 使用。


回合管理与上下文同步模块

功能：

确保每个回合中，所有消息被正确添加到GroupChat的聊天历史中。
各 Agent 在观察阶段能通过访问聊天历史看到上一轮的玩家响应集合和当前轮的 DM 消息，形成正确的时序和决策输入。




扩展与自定义机制

支持各 Agent 重写 generate_reply 方法，实现自动回复。
可通过 function_map 支持工具调用，辅助情节判断与环境查询。
UserProxyAgent 的 human_input_mode 可设置为 ALWAYS、NEVER 或 TERMINATE，以支持必要时的人工干预。
对话拓扑可自定义，GroupChatManager 的 speaker_selection_method（本方案采用 round_robin）可灵活配置。



三、详细的单 Agent 行为说明
A. DM Agent（故事推进者）

构建方式：基于 AssistantAgent，系统提示中包含剧本推进与关键事件判断指令。
观察阶段：从聊天历史中获取上一轮的玩家响应集合，结合当前剧本状态和环境信息。
决策阶段：根据观察内容，结合剧本进展和环境状态，决定如何推进故事情节。
行动阶段：生成并发布情节推进消息，作为当前轮的 DM 消息。

B. 玩家 Agent（响应者）

构建方式：基于 UserProxyAgent 或适配的 Agent 类型。
观察阶段：从聊天历史中获取上一轮的玩家响应集合和当前轮的 DM 消息，按时间顺序构建决策输入。
决策阶段：依据观察内容及自身角色目标生成响应。
行动阶段：提交响应，添加到GroupChat的聊天历史中，成为本回合"玩家响应集合"的一部分。

C. 环境剧本 Agent

构建方式：可作为独立 Agent 或集成在环境剧本模块中。
观察阶段：从聊天历史中获取完整回合对话（DM消息+所有玩家响应），提取关键信息。
判断与维护：判断是否需要更新剧本中的环境上下文，并直接修改剧本数据。
反馈机制：更新后的剧本状态供下一轮 DM Agent 使用，体现在下一轮的情节推进消息中。

四、对话与交互流程概述

初始化阶段

建立全局聊天室，加载初始场景、环境变量与剧本数据。
DM Agent、玩家 Agent 和环境剧本 Agent 注册至群聊中。


完整回合流程（第N轮为例）：

DM 推进阶段：DM Agent 从聊天历史中获取第N-1轮的玩家响应集合，结合当前剧本状态，生成第N轮的情节推进消息。
玩家观察阶段：各玩家 Agent 从聊天历史中获取并观察第N-1轮的玩家响应集合（在前）和第N轮的 DM 消息（在后）。
玩家响应阶段：各玩家根据观察内容独立生成响应，添加到聊天历史。
完整记录形成：本轮所有玩家的响应自然形成第N轮的"玩家响应集合"，记录在聊天历史中。
环境剧本更新阶段：环境剧本 Agent 分析第N轮完整对话（DM消息+玩家响应集合），更新剧本环境上下文。


循环执行

系统持续进行上述回合流程，通过聊天历史同步各 Agent 的观察与响应，直至达到剧本终止条件或预设最大回合数。



五、总结
本设计方案基于 Autogen 框架构建多智能体跑团游戏系统，核心亮点在于：

基于聊天历史的消息流动：

利用 Autogen 的 GroupChat 功能自然记录所有交互信息
各 Agent 通过访问聊天历史获取所需信息，不需要额外的消息派发机制


清晰的时序处理：

明确定义每个回合中信息流动的时序：上一轮玩家响应集合（在前）→ 当前轮 DM 消息（在后）→ 当前轮玩家响应
确保所有 Agent 基于一致的信息进行决策，模拟真实跑团中的信息流动


模块化的职责分配：

DM Agent 专注于故事推进和关键事件触发
玩家 Agent 专注于角色扮演和决策响应
环境剧本 Agent 专注于场景状态监控和更新


灵活的扩展能力：

支持工具调用、人工干预和自定义对话拓扑
可根据实际需求调整各模块行为和交互方式



通过这种设计，系统能够模拟真实跑团的互动体验，同时充分利用 Autogen 框架的多智能体协作能力和聊天历史记录功能，实现自动化和沉浸式的角色扮演游戏体验。